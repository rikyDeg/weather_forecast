{"version":3,"sources":["Garda.js","App.js","serviceWorker.js","index.js"],"names":["Garda","props","state","Container","maxWidth","Grid","container","spacing","item","xs","Paper","alt","src","React","Component","App","useState","value","setValue","className","Tabs","onChange","event","newValue","indicatorColor","textColor","centered","Tab","label","hidden","width","height","frameBorder","title","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mVA+BeA,E,YAzBb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,GAFI,E,sEAOjB,OACE,kBAACC,EAAA,EAAD,CAAWC,SAAS,MAClB,kBAACC,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,GACvB,kBAACF,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,IACb,kBAACC,EAAA,EAAD,KACE,yBAAKC,IAAI,YAAYC,IAAI,uEAG7B,kBAACP,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,IACb,kBAACC,EAAA,EAAD,KACE,yBAAKC,IAAI,aAAaC,IAAI,iF,GAlBpBC,IAAMC,W,MC8CXC,MA3Cf,WAAgB,IAAD,EAEYF,IAAMG,SAAS,GAF3B,mBAEPC,EAFO,KAEAC,EAFA,KAOb,OAEE,yBAAKC,UAAU,OACb,kBAACC,EAAA,EAAD,CACGH,MAAOA,EACPI,SARa,SAACC,EAAOC,GAC3BL,EAASK,IAQHC,eAAe,UACfC,UAAU,UACVC,UAAQ,GAER,kBAACC,EAAA,EAAD,CAAKC,MAAM,kBACX,kBAACD,EAAA,EAAD,CAAKC,MAAM,6BACX,kBAACD,EAAA,EAAD,CAAKC,MAAM,WAEd,yBAAKC,OAAkB,OAAVZ,GAAmB,IAAMA,GACpC,kBAAC,EAAD,OAEF,yBAAKY,OAAQ,IAAMZ,GACjB,kBAACP,EAAA,EAAD,KACE,sCACA,4BAAQoB,MAAM,MAAMC,OAAO,MAAMnB,IAAI,qQAAqQoB,YAAY,IAAIC,MAAM,YAElU,kBAACvB,EAAA,EAAD,KACE,oCACA,4BAAQoB,MAAM,MAAMC,OAAO,MAAMnB,IAAI,qQAAqQoB,YAAY,IAAIC,MAAM,WAGpU,yBAAKJ,OAAQ,IAAMZ,GACjB,kBAACP,EAAA,EAAD,KACE,yBAAKE,IAAI,0FAA0FD,IAAI,cChC7FuB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.49cb2c9d.chunk.js","sourcesContent":["import React from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport Container from '@material-ui/core/Container';\n\nclass Garda extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n\n    }\n  }\n  render() {\n    return (\n      <Container maxWidth=\"md\">\n        <Grid container spacing={3}>\n          <Grid item xs={12}>\n            <Paper>\n              <img alt=\"pressione\" src=\"http://www.meteo-allerta.it/uploads/pics/uwz-it_ora_peler_en.png\" />\n            </Paper>\n          </Grid>\n          <Grid item xs={12}>\n            <Paper>\n              <img alt=\"previsioni\" src=\"https://www.ilmeteo.it/portale/files/ilmeteo/ensemble/graph-8510.png\" />\n            </Paper>\n          </Grid>\n      </Grid>\n      </Container>\n    );\n  }\n}\nexport default Garda;\n","import React from 'react';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport Garda from './Garda.js';\nimport Paper from '@material-ui/core/Paper';\n\nimport './App.css';\n\nfunction App() {\n\n const [value, setValue] = React.useState(0);\n\n const handleChange = (event, newValue) => {\n   setValue(newValue);\n };\n  return (\n\n    <div className=\"App\">\n      <Tabs\n         value={value}\n         onChange={handleChange}\n         indicatorColor=\"primary\"\n         textColor=\"primary\"\n         centered\n       >\n         <Tab label=\"Lago di garda\" />\n         <Tab label=\"Previsioni vento venezia\" />\n         <Tab label=\"Maree\" />\n      </Tabs>\n      <div hidden={value !== null &&  0 !== value} >\n        <Garda />\n      </div>\n      <div hidden={1 !== value}>\n        <Paper>\n          <h2>Conche</h2>\n          <iframe width=\"800\" height=\"600\" src=\"https://embed.windy.com/embed2.html?lat=45.370&lon=12.274&zoom=10&level=surface&overlay=wind&menu=&message=&marker=&calendar=&pressure=&type=map&location=coordinates&detail=true&detailLat=45.456&detailLon=12.269&metricWind=kt&metricTemp=%C2%B0C&radarRange=-1\" frameBorder=\"0\" title=\"conche\"></iframe>\n        </Paper>\n        <Paper>\n          <h2>Irom</h2>\n          <iframe width=\"800\" height=\"600\" src=\"https://embed.windy.com/embed2.html?lat=45.370&lon=12.274&zoom=10&level=surface&overlay=wind&menu=&message=&marker=&calendar=&pressure=&type=map&location=coordinates&detail=true&detailLat=45.456&detailLon=12.269&metricWind=kt&metricTemp=%C2%B0C&radarRange=-1\" frameBorder=\"0\" title=\"irom\"></iframe>\n        </Paper>\n      </div>\n      <div hidden={2 !== value}>\n        <Paper>\n          <img src=\"https://www.comune.venezia.it/sites/default/files/publicCPSM/png/bollettino_grafico.jpg\" alt=\"maree\"/>\n        </Paper>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}